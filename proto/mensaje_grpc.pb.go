// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/mensaje.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FuncionesClient is the client API for Funciones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuncionesClient interface {
	AgregarRegistroOMS(ctx context.Context, in *Nombre_Estado, opts ...grpc.CallOption) (*Empty, error)
	RegistrarNombresDatanode1(ctx context.Context, in *Nombre_ID, opts ...grpc.CallOption) (*Empty, error)
	RegistrarNombresDatanode2(ctx context.Context, in *Nombre_ID, opts ...grpc.CallOption) (*Empty, error)
	ObtenerNombres(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Nombre, error)
	ObtenerCifras(ctx context.Context, in *Estado, opts ...grpc.CallOption) (*Personas, error)
	ObtenerCifras2(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error)
	ObtenerCifras3(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Empty, error)
}

type funcionesClient struct {
	cc grpc.ClientConnInterface
}

func NewFuncionesClient(cc grpc.ClientConnInterface) FuncionesClient {
	return &funcionesClient{cc}
}

func (c *funcionesClient) AgregarRegistroOMS(ctx context.Context, in *Nombre_Estado, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.Funciones/AgregarRegistroOMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funcionesClient) RegistrarNombresDatanode1(ctx context.Context, in *Nombre_ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.Funciones/RegistrarNombresDatanode1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funcionesClient) RegistrarNombresDatanode2(ctx context.Context, in *Nombre_ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.Funciones/RegistrarNombresDatanode2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funcionesClient) ObtenerNombres(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Nombre, error) {
	out := new(Nombre)
	err := c.cc.Invoke(ctx, "/grpc.Funciones/ObtenerNombres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funcionesClient) ObtenerCifras(ctx context.Context, in *Estado, opts ...grpc.CallOption) (*Personas, error) {
	out := new(Personas)
	err := c.cc.Invoke(ctx, "/grpc.Funciones/ObtenerCifras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funcionesClient) ObtenerCifras2(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/grpc.Funciones/ObtenerCifras2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funcionesClient) ObtenerCifras3(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.Funciones/ObtenerCifras3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuncionesServer is the server API for Funciones service.
// All implementations must embed UnimplementedFuncionesServer
// for forward compatibility
type FuncionesServer interface {
	AgregarRegistroOMS(context.Context, *Nombre_Estado) (*Empty, error)
	RegistrarNombresDatanode1(context.Context, *Nombre_ID) (*Empty, error)
	RegistrarNombresDatanode2(context.Context, *Nombre_ID) (*Empty, error)
	ObtenerNombres(context.Context, *ID) (*Nombre, error)
	ObtenerCifras(context.Context, *Estado) (*Personas, error)
	ObtenerCifras2(context.Context, *Mensaje) (*Mensaje, error)
	ObtenerCifras3(context.Context, *Mensaje) (*Empty, error)
	mustEmbedUnimplementedFuncionesServer()
}

// UnimplementedFuncionesServer must be embedded to have forward compatible implementations.
type UnimplementedFuncionesServer struct {
}

func (UnimplementedFuncionesServer) AgregarRegistroOMS(context.Context, *Nombre_Estado) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgregarRegistroOMS not implemented")
}
func (UnimplementedFuncionesServer) RegistrarNombresDatanode1(context.Context, *Nombre_ID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarNombresDatanode1 not implemented")
}
func (UnimplementedFuncionesServer) RegistrarNombresDatanode2(context.Context, *Nombre_ID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarNombresDatanode2 not implemented")
}
func (UnimplementedFuncionesServer) ObtenerNombres(context.Context, *ID) (*Nombre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerNombres not implemented")
}
func (UnimplementedFuncionesServer) ObtenerCifras(context.Context, *Estado) (*Personas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerCifras not implemented")
}
func (UnimplementedFuncionesServer) ObtenerCifras2(context.Context, *Mensaje) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerCifras2 not implemented")
}
func (UnimplementedFuncionesServer) ObtenerCifras3(context.Context, *Mensaje) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerCifras3 not implemented")
}
func (UnimplementedFuncionesServer) mustEmbedUnimplementedFuncionesServer() {}

// UnsafeFuncionesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuncionesServer will
// result in compilation errors.
type UnsafeFuncionesServer interface {
	mustEmbedUnimplementedFuncionesServer()
}

func RegisterFuncionesServer(s grpc.ServiceRegistrar, srv FuncionesServer) {
	s.RegisterService(&Funciones_ServiceDesc, srv)
}

func _Funciones_AgregarRegistroOMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nombre_Estado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuncionesServer).AgregarRegistroOMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Funciones/AgregarRegistroOMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuncionesServer).AgregarRegistroOMS(ctx, req.(*Nombre_Estado))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funciones_RegistrarNombresDatanode1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nombre_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuncionesServer).RegistrarNombresDatanode1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Funciones/RegistrarNombresDatanode1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuncionesServer).RegistrarNombresDatanode1(ctx, req.(*Nombre_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funciones_RegistrarNombresDatanode2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nombre_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuncionesServer).RegistrarNombresDatanode2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Funciones/RegistrarNombresDatanode2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuncionesServer).RegistrarNombresDatanode2(ctx, req.(*Nombre_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funciones_ObtenerNombres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuncionesServer).ObtenerNombres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Funciones/ObtenerNombres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuncionesServer).ObtenerNombres(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funciones_ObtenerCifras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Estado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuncionesServer).ObtenerCifras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Funciones/ObtenerCifras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuncionesServer).ObtenerCifras(ctx, req.(*Estado))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funciones_ObtenerCifras2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuncionesServer).ObtenerCifras2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Funciones/ObtenerCifras2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuncionesServer).ObtenerCifras2(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funciones_ObtenerCifras3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuncionesServer).ObtenerCifras3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Funciones/ObtenerCifras3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuncionesServer).ObtenerCifras3(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

// Funciones_ServiceDesc is the grpc.ServiceDesc for Funciones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Funciones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Funciones",
	HandlerType: (*FuncionesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgregarRegistroOMS",
			Handler:    _Funciones_AgregarRegistroOMS_Handler,
		},
		{
			MethodName: "RegistrarNombresDatanode1",
			Handler:    _Funciones_RegistrarNombresDatanode1_Handler,
		},
		{
			MethodName: "RegistrarNombresDatanode2",
			Handler:    _Funciones_RegistrarNombresDatanode2_Handler,
		},
		{
			MethodName: "ObtenerNombres",
			Handler:    _Funciones_ObtenerNombres_Handler,
		},
		{
			MethodName: "ObtenerCifras",
			Handler:    _Funciones_ObtenerCifras_Handler,
		},
		{
			MethodName: "ObtenerCifras2",
			Handler:    _Funciones_ObtenerCifras2_Handler,
		},
		{
			MethodName: "ObtenerCifras3",
			Handler:    _Funciones_ObtenerCifras3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mensaje.proto",
}
